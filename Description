Project Description: Smart Route Navigator

The Smart Route Navigator is an intelligent and user-friendly route planning system designed to provide optimal navigation paths between cities, considering factors such as distance, traffic conditions, and road types. Built using C++, this project leverages graph algorithms, geospatial calculations, and user authentication to deliver a seamless experience for travelers.

Key Features:
1. User Authentication:
   - Users can create accounts, log in, or continue as guests.
   - Personalized experience with saved home city and user details.

2. Route Planning:
   - Find the shortest path between two cities using A* Search Algorithm.
   - Supports both traffic-aware and traffic-free route calculations.
   - Provides detailed directions, including road names, distances, and estimated travel times.

3. Geospatial Calculations:
   - Uses Haversine Formula to calculate the geographical distance between cities based on latitude and longitude.
   - Ensures accurate and efficient pathfinding.

4. Traffic Consideration:
   - Incorporates traffic intensity as a factor in route optimization.
   - Adjusts travel time estimates based on traffic conditions.

5. Comprehensive Road Network:
   - Includes a detailed dataset of cities, roads, and their attributes (e.g., distance, direction, traffic intensity).
   - Supports bidirectional travel with directional indicators (North, South, East, West).

6. User-Friendly Interface:
   - Interactive dashboard for easy navigation.
   - Clear and concise route instructions with step-by-step guidance.

7. Scalability:
   - Modular design allows for easy addition of new cities, roads, and features.
   - Efficient data structures (e.g., adjacency lists, hash maps) ensure fast performance.

Technical Details:
- Data Structures:
  - unordered_map for efficient city and road ID mapping.
  - vector for storing user data, coordinates, and road networks.
  - set for priority queue implementation in the A* algorithm.

- Algorithms:
  - A* Search Algorithm for optimal pathfinding with heuristic-based optimization.
  - Haversine Formula for geospatial distance calculations.

- Input/Output:
  - Users can input source and destination cities.
  - Outputs include detailed route instructions, distances, and estimated travel times.

Example Use Case:
1. A user logs in and sets their home city (e.g., "Indore").
2. They search for a route to a destination city (e.g., "Bhopal").
3. The system calculates the shortest path, considering traffic conditions.
4. The user receives step-by-step directions, including road names, distances, and travel times.

Future Enhancements:
- Integration with real-time traffic data for dynamic route updates.
- Graphical user interface (GUI) for better visualization of routes.
- Support for additional modes of transportation (e.g., public transit, cycling).
- Mobile app development for on-the-go navigation.
